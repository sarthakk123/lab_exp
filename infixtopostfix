#include <iostream>
#include <cstring>
#include <stack>
#include <cctype> 
#include <sstream> 

using namespace std;

// Get weight of operators as per precedence
int getWeight(char ch) {
    switch (ch) {
        case '/':
        case '*': return 2;
        case '+':
        case '-': return 1;
        default: return 0;
    }
}

// Convert infix expression to postfix using a stack
void infix2postfix(const char infix[], char postfix[], int size) {
    stack<char> s;
    int weight;
    int k = 0;
    
    for (int i = 0; i < size; i++) {
        char ch = infix[i];

        if (ch == '(') {
            s.push(ch);
        } else if (ch == ')') {
            while (!s.empty() && s.top() != '(') {
                postfix[k++] = s.top();
                s.pop();
            }
            if (!s.empty()) {
                s.pop(); // Pop the '('
            }
        } else if (isspace(ch)) {
            continue; // Skip spaces
        } else {
            weight = getWeight(ch);
            if (weight == 0) {
                postfix[k++] = ch; // Operand
            } else {
                while (!s.empty() && s.top() != '(' && weight <= getWeight(s.top())) {
                    postfix[k++] = s.top();
                    s.pop();
                }
                s.push(ch); // Push the current operator
            }
        }
    }

    // Pop remaining operators from the stack
    while (!s.empty()) {
        postfix[k++] = s.top();
        s.pop();
    }
    postfix[k] = '\0';
}


double evaluatePostfix(const char postfix[]) {
    stack<double> s;

    for (int i = 0; postfix[i] != '\0'; i++) {
        char ch = postfix[i];

        if (isdigit(ch)) {
            
            s.push(ch - '0'); 
        } else {
            double val2 = s.top(); s.pop();
            double val1 = s.top(); s.pop();
            switch (ch) {
                case '+': s.push(val1 + val2); break;
                case '-': s.push(val1 - val2); break;
                case '*': s.push(val1 * val2); break;
                case '/': s.push(val1 / val2); break;
            }
        }
    }

    return s.top();
}


int main() {
    char infix[100];
    cout << "Enter Infix Expression: ";
    cin.getline(infix, 100); 

    int size = strlen(infix);
    char postfix[size + 1]; 
    infix2postfix(infix, postfix, size);
    
    cout << "Infix Expression: " << infix << endl;
    cout << "Postfix Expression: " << postfix << endl;

    double result = evaluatePostfix(postfix);
    cout << "Result: " << result << endl;

    return 0;
}
